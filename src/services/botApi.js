// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const TELEGRAM_API = 'https://api.telegram.org'
const API_TIMEOUT = 5000 // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
const POLLING_INTERVAL = 1000 // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
const BOT_COMMANDS = {
  START: '/start',
  STOP: '/stop',
  HELP: '/help',
  SETTINGS: '/settings'
}

const COMMAND_DESCRIPTIONS = [
  { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
  { command: 'stop', description: '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' },
  { command: 'help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É' },
  { command: 'settings', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' }
]

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function getBotToken() {
  const token = import.meta.env.VITE_TELEGRAM_BOT_TOKEN
  if (!token) {
    console.error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    return null
  }
  return token.trim()
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
 */
async function setCommands() {
  try {
    const result = await sendTelegramRequest('setMyCommands', {
      commands: COMMAND_DESCRIPTIONS
    })
    
    if (result && result.ok) {
      console.info('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
    } else {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞')
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:', error)
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞
 * @returns {Promise<boolean>}
 */
async function checkBotStatus() {
  try {
    const result = await sendTelegramRequest('getMe')
    if (result && result.ok) {
      console.info('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω:', result.result.username)
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      await setCommands()
      return true
    }
    return false
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<boolean>}
 */
async function sendStartMessage(chatId) {
  const siteUrl = import.meta.env.VITE_SITE_URL || 'https://foodtrack.site'
  const loginUrl = `${siteUrl}/auth`

  return await sendMessage(
    chatId,
    `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FoodTrack!</b>\n\n` +
    `–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–æ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç:\n` +
    `üëâ <a href="${loginUrl}">–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram</a>\n\n` +
    `–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞.`,
    { disable_web_page_preview: true }
  )
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<boolean>}
 */
async function sendHelpMessage(chatId) {
  const commandsList = COMMAND_DESCRIPTIONS
    .map(cmd => `/${cmd.command} - ${cmd.description}`)
    .join('\n')

  return await sendMessage(
    chatId,
    `‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n${commandsList}\n\n` +
    `–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.`
  )
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns {Promise<boolean>}
 */
async function sendMessage(chatId, text, options = {}) {
  if (!chatId || !text) {
    console.warn('–ù–µ —É–∫–∞–∑–∞–Ω ID —á–∞—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    return false
  }

  try {
    const result = await sendTelegramRequest('sendMessage', {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML',
      ...options
    })

    return result && result.ok
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    return false
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @param {number} offset - –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * @returns {Promise<number>} –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ offset
 */
async function handleUpdates(offset = 0) {
  try {
    const updates = await sendTelegramRequest('getUpdates', {
      offset,
      timeout: 30,
      allowed_updates: ['message']
    })

    if (!updates || !updates.ok) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
      return offset
    }

    for (const update of updates.result) {
      if (update.message && update.message.text) {
        const chatId = update.message.chat.id
        const text = update.message.text

        switch (text) {
          case BOT_COMMANDS.START:
            await sendStartMessage(chatId)
            break
          case BOT_COMMANDS.STOP:
            await sendMessage(
              chatId, 
              'üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n' +
              '–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
            )
            break
          case BOT_COMMANDS.HELP:
            await sendHelpMessage(chatId)
            break
          case BOT_COMMANDS.SETTINGS:
            await sendMessage(
              chatId,
              '‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n' +
              '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n' +
              '‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏ /stop'
            )
            break
        }
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      offset = update.update_id + 1
    }

    return offset
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error)
    return offset
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã /start –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @returns {Promise<boolean>}
 */
async function checkStartCommand(userId) {
  try {
    const result = await sendTelegramRequest('getUpdates', {
      offset: -1,
      limit: 100
    })

    if (!result || !result.ok) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π')
      return false
    }

    const hasStart = result.result.some(update => 
      update.message && 
      update.message.from && 
      update.message.from.id === userId &&
      update.message.text === '/start'
    )

    if (!hasStart) {
      console.warn('–ö–æ–º–∞–Ω–¥–∞ /start –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π')
    }

    return hasStart
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error)
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API —Å —Ç–∞–π–º–∞—É—Ç–æ–º
 * @param {string} method - –ú–µ—Ç–æ–¥ API
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<Response>}
 */
async function sendTelegramRequest(method, params = {}) {
  const token = getBotToken()
  if (!token) {
    throw new Error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω')
  }

  const controller = new AbortController()
  const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT)

  try {
    const response = await fetch(`${TELEGRAM_API}/bot${token}/${method}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(params),
      signal: controller.signal
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    return await response.json()
  } catch (error) {
    if (error.name === 'AbortError') {
      throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞')
    }
    throw error
  } finally {
    clearTimeout(timeoutId)
  }
}

export const botApi = {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –∏ –Ω–∞–ª–∏—á–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   * @returns {Promise<boolean>}
   */
  async checkBot(userId = null) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
    const botAvailable = await checkBotStatus()
    if (!botAvailable) {
      return false
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã /start
    if (userId) {
      return await checkStartCommand(userId)
    }

    return true
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–µ—Å—Å–∏–∏
   * @param {Object} user - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   */
  async notifySessionStart(user) {
    if (!user || !user.id) return

    const deviceInfo = getDeviceInfo()
    const message = formatUserMessage(user, '–í—Ö–æ–¥', deviceInfo)
    
    await sendMessage(user.id, message)
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
   * @param {Object} user - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   */
  async notifySessionEnd(user) {
    if (!user || !user.id) return

    const deviceInfo = getDeviceInfo()
    const message = formatUserMessage(user, '–í—ã—Ö–æ–¥', deviceInfo)
    
    await sendMessage(user.id, message)
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
function formatDateTime(date) {
  return new Intl.DateTimeFormat('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  }).format(date)
}

function formatUserMessage(user, action, deviceInfo) {
  const time = formatDateTime(new Date())
  const name = user.first_name || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
  
  return `üîî ${action} –≤ —Å–∏—Å—Ç–µ–º—É
üë§ ${name}
üïí ${time}
üíª ${deviceInfo}`
}

function getDeviceInfo() {
  const userAgent = navigator.userAgent
  let deviceInfo = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
  
  if (userAgent.includes('Windows')) {
    deviceInfo = 'Windows'
  } else if (userAgent.includes('Mac')) {
    deviceInfo = 'MacOS'
  } else if (userAgent.includes('Linux')) {
    deviceInfo = 'Linux'
  } else if (userAgent.includes('Android')) {
    deviceInfo = 'Android'
  } else if (userAgent.includes('iPhone') || userAgent.includes('iPad')) {
    deviceInfo = 'iOS'
  }
  
  if (userAgent.includes('Chrome')) {
    deviceInfo += ' / Chrome'
  } else if (userAgent.includes('Firefox')) {
    deviceInfo += ' / Firefox'
  } else if (userAgent.includes('Safari')) {
    deviceInfo += ' / Safari'
  } else if (userAgent.includes('Edge')) {
    deviceInfo += ' / Edge'
  }
  
  return deviceInfo
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
async function startPolling() {
  let offset = 0
  
  while (true) {
    try {
      offset = await handleUpdates(offset)
      await new Promise(resolve => setTimeout(resolve, POLLING_INTERVAL))
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–ø—Ä–æ—Å–∞:', error)
      await new Promise(resolve => setTimeout(resolve, POLLING_INTERVAL * 5))
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
startPolling().catch(console.error)
